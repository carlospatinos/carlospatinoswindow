extends layoutProfiles

block content

  script.
    attributesDefined = !{JSON.stringify(attributes)}
    console.log(attributesDefined)

  div.top


  div.container
    div.content
      h3= stepDetails
      p Here you will find the summary of the attributes highlighted by you and others.
      div.text-center
        each attrValue, attrName in attributes
          label= attrValue
        div#viz
        br
        
        br
      p The next step is to invite your colleagues to say which words they associate with you. You can do this by sharing the following URL: 
        a(href='http://tool.org/adsasdadasdasdas') http://tool.org/jh/adsasdadasdasdas
      p To watch how your Johari Window changes, uplease se this URL:
        a(href='http://tool.org/johari?view=adsasdadasdasdas') http://tool.org/johari?view=adsasdadasdasdas
      


  script.
    // GROUPS:  0 Web | 1: Adobe | 2: hybrid
    var data = [
      {"id": 0, "name": "able", "r": 50 },
      {"id": 0, "name": "accepting", "r": 40 },
      {"id": 0, "name": "dignified", "r": 30 },
      {"id": 0, "name": "energetic", "r": 40 },
      {"id": 0, "name": "knowledgeable", "r": 45 },


      {"id": 1, "name": "able", "r": 50 },
      {"id": 1, "name": "accepting", "r": 40 },
      {"id": 1, "name": "dignified", "r": 30 },
      {"id": 1, "name": "energetic", "r": 40 },
      {"id": 1, "name": "knowledgeable", "r": 45 },

      {"id": 2, "name": "able", "r": 50 },
      {"id": 2, "name": "accepting", "r": 40 },
      {"id": 2, "name": "dignified", "r": 30 },
      {"id": 2, "name": "energetic", "r": 40 },
      {"id": 2, "name": "knowledgeable", "r": 45 },

      {"id": 3, "name": "able", "r": 50 },
      {"id": 3, "name": "accepting", "r": 40 },
      {"id": 3, "name": "dignified", "r": 30 },
      {"id": 3, "name": "energetic", "r": 40 },
      {"id": 3, "name": "knowledgeable", "r": 45 },
    ];

    var width = document.getElementById("viz").offsetWidth; //window.innerWidth,
        height = 600, dotRadius = 4,
        gridSpacing = 10;

    var widthPos1 = width/4;
    var widthPos2 = width/2 + widthPos1;

    var heightPos1 = 100;
    var heightPos2 = height*4/5;

    var textXPos = 30;
    var textYPos = height/2+30;

    var fill = d3.scale.category10();

    var nodes = [], labels = [],
        foci = [{x: widthPos1, y: heightPos1}, {x: widthPos2, y: heightPos1}, {x: widthPos1, y: heightPos2}, {x: widthPos2, y: heightPos2}];

    var svg = d3.select("#viz").append("svg")
        .attr("width", "100%")
        .attr("height", height)
        //.attr("domflag", '');

    text = svg.append('text').text('KNOWN TO SELF + KNOWN TO OTHERS').attr('x', widthPos1).attr('y', textXPos).style("font-size","20px");
    text = svg.append('text').text('NOT KNOWN TO SELF + KNOWN TO OTHERS').attr('x', widthPos2).attr('y', textXPos).style("font-size","20px");
    text = svg.append('text').text('KNOWN TO SELF + NOT KNOWN TO OTHERS').attr('x', widthPos1).attr('y', textYPos).style("font-size","20px");
    text = svg.append('text').text('NOT KNOWN TO SELF + NOT KNOWN TO OTHERS').attr('x', widthPos2).attr('y', textYPos).style("font-size","20px");

    // #################################
    //Scales for item positions
    var x = d3.scale.linear().domain([-10,10]).range([0,width]);
    var y = d3.scale.linear().domain([-10,10]).range([height,0]);
    //gridlines
    /*
    svg.append("path")
      .attr("class","grid")
      .attr("d",function() {
        var d = "";
        for (var i = gridSpacing; i < width; i += gridSpacing ) {
          d += "M"+i+",0 L"+i+","+height;
        }
        for (var i = gridSpacing; i < height; i += gridSpacing ) {
          d += "M0,"+i+" L"+width+","+i;
        }
        return d;
      })
      */
    //x axis
    svg.append("path")
      .attr("class","axis")
      .attr("d","M0,"+height/2+" L"+width+","+height/2);
    //y axis
    svg.append("path")
      .attr("class","axis")
      .attr("d","M"+width/2+",0 L"+width/2+","+height);

    // #################################

    var force = d3.layout.force()
        .nodes(nodes)
        .links([])
        .charge(-400)
        //.chargeDistance(100)
        .gravity(0.1)
        .friction(0.8)
        .size([width, height])
        .on("tick", tick);

    //var node = svg.selectAll("circle");
    var node = svg.selectAll("g");

    var counter = 0;

    function tick(e) {
      var k = .1 * e.alpha;

      // Push nodes toward their designated focus.
      nodes.forEach(function(o, i) {
        o.y += (foci[o.id].y - o.y) * k;
        o.x += (foci[o.id].x - o.x) * k;
      });

      node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

    }


    var timer = setInterval(function(){

      if (nodes.length > data.length-1) { clearInterval(timer); return;}

      var item = data[counter];
      nodes.push({id: item.id, r: item.r, name: item.name});
      force.start();

      node = node.data(nodes);

      var n = node.enter().append("g")
          .attr("class", "node")
          .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
          .style('cursor', 'pointer')
          .on('mousedown', function() {
             var sel = d3.select(this);
             sel.moveToFront();
          })
          .call(force.drag);

      n.append("circle")
          .attr("r",  function(d) { return d.r; })
          .style("fill", function(d) { return fill(d.id); })

      n.append("text")
          .text(function(d){
              return d.name;
          })
          .style("font-size", function(d) {
              return Math.min(2 * d.r, (2 * d.r - 8) / this.getComputedTextLength() * 16) + "px"; 
           })
          .attr("dy", ".35em")

      counter++;
    }, 200);


    d3.selection.prototype.moveToFront = function() {
      return this.each(function(){
        this.parentNode.appendChild(this);
      });
    };

    function resize() {
      width = window.innerWidth;
      force.size([width, height]);
      force.start();
    }

    d3.select(window).on('resize', resize);